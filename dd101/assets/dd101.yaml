---
# - hosts: 127.0.0.1
#   tasks:
#     - name: local test
#       local_action: copy content="here" dest=/root/setup.txt
- hosts: webservers
  remote_user: root
  pre_tasks:
    - name: report back
      local_action: copy content="Apache installing on three webservers" dest=/root/status.txt
  tasks:
    - name: Update Apt Cache
      apt: update_cache=yes cache_valid_time=3600

    - name: Install Apache
      apt: 
        name: apache2
        state: present
    - name: Enable Mod Status
      blockinfile:
        block: |
          ExtendedStatus ON
          <Location /server-status>
            SetHandler server-status
            Require all granted
          </Location>
          ServerName {{ansible_hostname}}
        dest: /etc/apache2/apache2.conf
    - name: restart apache
      shell: apachectl restart
    - name: create index.html
      copy:
        content: "<h1>You have landed on {{ansible_hostname}}</h1>"
        dest: /var/www/html/index.html
      
  post_tasks:
    - name: report back
      local_action: copy content="Apache installed on the webserver ({{ansible_hostname}})" dest=/root/status.txt

- hosts: loadbalancer
  tasks: 
    - name: install haproxy
      apt:
        name: haproxy
        state: present
    - name: Configure step 1
      blockinfile:
        block: |
          ENABLED=1
        dest: /etc/default/haproxy
    - name: haproxy.cfg
      blockinfile:
        block: |
          global
              daemon
              maxconn 256
          defaults
              mode http
              timeout connect 5000ms
              timeout client 50000ms
              timeout server 50000ms
          frontend http-in
              bind *:80
              default_backend webservers
          backend webservers
              balance roundrobin
              default-server fall 3 inter 5s
              # Poor-mans sticky
              # balance source
              # JSP SessionID Sticky
              # appsession JSESSIONID len 52 timeout 3h
              option httpchk
              option forwardfor
              option http-server-close
              server host03 {{ hostvars['host03']['ansible_ens3']['ipv4']['address'] }}:80 check
              server host04 {{ hostvars['host04']['ansible_ens3']['ipv4']['address'] }}:80 check
              server host05 {{ hostvars['host05']['ansible_ens3']['ipv4']['address'] }}:80 check
          listen stats
              bind *:8080
              mode http
              stats uri /haproxy_stats
              stats enable
        dest: /etc/haproxy/haproxy.cfg
    - name:
      service:
        name: haproxy
        state: restarted


- hosts: webservers
  roles:
    - { role: Datadog.datadog, become: yes }
  vars_files:
    - /root/ddapikey.yml
  vars:
    # datadog_api_key: "{{ lookup('env', 'DD_API_KEY') }}"
    datadog_config:
      tags: "role:web, training:intro-to-datadog"
      logs_enabled: true
      process_config:
        enabled: "true" # has to be set as a string
  
    datadog_checks:
      apache:
        init_config:
        instances:
          - apache_status_url: http://localhost/server-status?auto 
  tasks:
    # - name: send event that we are live
    #   shell: echo -n "training.hosts.started:1|c|#shell"| nc -4u -w0 127.0.0.1 8125
    - name: report back
      local_action: copy content="Datadog Agent installed on {{ansible_hostname}}" dest=/root/status.txt
  pre_tasks:
    - name: report back
      local_action: copy content="Datadog Agent installing on all webservers" dest=/root/status.txt
     

- hosts: loadbalancer
  roles:
    - { role: Datadog.datadog, become: yes }
  vars_files:
    - /root/ddapikey.yml
  vars:
    # datadog_api_key: "{{ lookup('env', 'DD_API_KEY') }}"
    datadog_config:
      tags: "role:lb, training:intro-to-datadog"
      logs_enabled: true
      process_config:
        enabled: "true" # has to be set as a string
  
    datadog_checks:
      haproxy:
        init_config:
        instances:
          - url: http://localhost:8080/haproxy_stats
 
  tasks:
    # - name: send event that we are live
    #   shell: echo -n "training.hosts.started:1|c|#shell"| nc -4u -w0 127.0.0.1 8125
    - name: report back
      local_action: copy content="Datadog Agent installed on the load balancer" dest=/root/status.txt
  pre_tasks:
    - name: report back
      local_action: copy content="Datadog Agent installing on the load balancer" dest=/root/status.txt

- hosts: localhost
  roles:
    - { role: Datadog.datadog, become: yes }
  vars_files:
    - /root/ddapikey.yml
  vars:
    # datadog_api_key: "{{ lookup('env', 'DD_API_KEY') }}"
    datadog_config:
      tags: "role:util, training:intro-to-datadog"
      logs_enabled: true
      process_config:
        enabled: "true" # has to be set as a string
  
    datadog_checks:
      haproxy:
        init_config:
        instances:
          - url: http://localhost:8080/haproxy_stats
 
  tasks:
    - name: add apt key for nodesource
      apt_key: url=https://deb.nodesource.com/gpgkey/nodesource.gpg.key

    - name: add repo for nodesource
      apt_repository:
            repo: 'deb https://deb.nodesource.com/node_0.10 {{ ansible_distribution_release }} main' 
            update_cache: yes

    - name: install nodejs
      apt: name=nodejs

    - name: install autocannon
      npm:
        name: autocannon
        global: yes
    - blockinfile:
        block: |
          #! /usr/bin/env bash
          echo '_e{18,58}:Light Util Testing|The Light script has start banging on the demo environment|#shell,bash,lightscript'  >/dev/udp/localhost/8125
          pkill -f autocannon || echo 'process is not running'
          autocannon -f -d 10 -c 2 -r 1 {{ hostvars['host02']['ansible_ens3']['ipv4']['address'] }}
        destination: /usr/local/bin/light
    - file:
        path: /usr/local/bin/light
        mode: "+x"
    - blockinfile:
        block: |
          #! /usr/bin/env bash
          echo '_e{18,58}:Light Util Testing|The Light script has start banging on the demo environment|#shell,bash,lightscript'  >/dev/udp/localhost/8125
          pkill -f autocannon || echo 'process is not running'
          autocannon -f -d 10 -c 100 -r 100 {{ hostvars['host02']['ansible_ens3']['ipv4']['address'] }}
        destination: /usr/local/bin/heavy
    - file:
        path: /usr/local/bin/heavy
        mode: "+x"


    # - name: send event that we are live
    #   shell: echo -n "training.hosts.started:1|c|#shell"| nc -4u -w0 127.0.0.1 8125
    - name: report back
      local_action: copy content="Datadog Agent installed on host1" dest=/root/status.txt
  pre_tasks:
    - name: report back
      local_action: copy content="Datadog Agent installing on host1" dest=/root/status.txt  




