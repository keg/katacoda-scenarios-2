---
# - hosts: 127.0.0.1
#   tasks:
#     - name: local test
#       local_action: copy content="here" dest=/root/setup.txt
- hosts: webservers
  remote_user: root
  pre_tasks:
    - name: report back
      local_action: copy content="Apache installing on three hosts" dest=/root/status.txt
  tasks:
    - name: Update Apt Cache
      apt: update_cache=yes cache_valid_time=3600

    - name: Install Apache
      apt: 
        name: apache2
        state: present
    - name: Enable Mod Status
      blockinfile:
        block: |
          ExtendedStatus ON
          <Location /server-status>
            SetHandler server-status
            Require all granted
          </Location>
          ServerName {{ansible_hostname}}
        dest: /etc/apache2/apache2.conf
    - name: restart apache
      shell: apachectl restart
      
  post_tasks:
    - name: report back
      local_action: copy content="Apache installed on {{ansible_hostname}}" dest=/root/status.txt

- hosts: loadbalancer
  tasks: 
    - name: install haproxy
      apt:
        name: haproxy
        state: present
    - name: Configure step 1
      blockinfile:
        block: |
          ENABLED=1
        dest: /etc/default/haproxy
    - name: haproxy.cfg
      blockinfile:
        block: |
          global
              daemon
              maxconn 256
          defaults
              mode http
              timeout connect 5000ms
              timeout client 50000ms
              timeout server 50000ms
          frontend http-in
              bind *:80
              default_backend webservers
          backend webservers
              balance roundrobin
              default-server fall 3 inter 5s
              # Poor-mans sticky
              # balance source
              # JSP SessionID Sticky
              # appsession JSESSIONID len 52 timeout 3h
              option httpchk
              option forwardfor
              option http-server-close
              server host03 {{ hostvars['host03']['ansible_ens3']['ipv4']['address'] }}:80 check
              server host04 {{ hostvars['host04']['ansible_ens3']['ipv4']['address'] }}:80 check
              server host05 {{ hostvars['host05']['ansible_ens3']['ipv4']['address'] }}:80 check
          listen stats
              bind *:8080
              mode http
              stats uri /haproxy_stats
              stats enable
        dest: /etc/haproxy/haproxy.cfg
    - name:
      service:
        name: haproxy
        state: restarted


- hosts: webservers
  roles:
    - { role: Datadog.datadog, become: yes }
  vars_files:
    - /root/ddapikey.yml
  vars:
    # datadog_api_key: "{{ lookup('env', 'DD_API_KEY') }}"
    datadog_config:
      tags: "role:web, training:intro-to-datadog"
      logs_enabled: true
      process_config:
        enabled: "true" # has to be set as a string
  
    datadog_checks:
      apache:
        init_config:
        instances:
          - apache_status_url: http://localhost/server-status?auto 
  tasks:
    - name: report back
      local_action: copy content="Datadog Agent installed on {{ansible_hostname}}" dest=/root/status.txt
  pre_tasks:
    - name: report back
      local_action: copy content="Datadog Agent installing on all webservers" dest=/root/status.txt
     

- hosts: loadbalancer
  roles:
    - { role: Datadog.datadog, become: yes }
  vars_files:
    - /root/ddapikey.yml
  vars:
    # datadog_api_key: "{{ lookup('env', 'DD_API_KEY') }}"
    datadog_config:
      tags: "role:loadbalancer, training:intro-to-datadog"
      logs_enabled: true
      process_config:
        enabled: "true" # has to be set as a string
  
    datadog_checks:
      init_config:
      instances:
        - url: https://localhost:9000/haproxy_stats
 
  tasks:
    - name: report back
      local_action: copy content="Datadog Agent installed on host02" dest=/root/status.txt
  pre_tasks:
    - name: report back
      local_action: copy content="Datadog Agent installing on all load balancers" dest=/root/status.txt
     
